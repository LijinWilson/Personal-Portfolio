First we want to create an next js.
- next app create : npx create-next-app@{latest-version-number} {project-name}  npx create-next-app@13.4.8 portfolio
- run app : npx start dev
- install react icons : npm install react-icons.
- install framer motion : npm install framer motion
- while using the framer motion we must add --"use client"-- directive.
- here in header, the widget comes to the center as we applied the style via framer motion - 
        initial={{ y: -100, x: "-50%", opacity: 0 }}
        animate={{ y: 0, x: "-50%", opacity: 1 }}
- while adding an image from the external site for example image links: we have make changes in the next.config.json and also in the Image tag
        * we should add width, height, if not error will occur
        * the content added will be get from the error message displayed on the screen.
- while adding the group class we can style the inner element when the parent element is hovered the style will added to that child element.
- In next js we can public folder using forward slash
        eg = href="/sample.pdf"
- we can reduce the opacity of color using border-black/10
- Git push command
        - git push origin master.
- CSS : tracking - letter space, leading - line height 
- use scroll is the hook of the framer motion. used in the growing effect in the project section
- scroll-mt-8 allow the page to scroll at particular margin top, on clicking the header section
- install ** clsx ** for adding CSS classes based on condition.
- ** intersection observer api ** which track the section viewing on the page.
- we have created an another active-section-context.tsx page for managing the state(active section) or to get the control over the other components of the page
        - here we are making a communication between the header and the content of the page.
        - wrapping the header and the children inside the context components. now it act as an provider.
        - we want to use the consumer on the place where we want to get that data.
- Now we are getting information in which view the page is in.
        - we use react intersection observer
        - inside that we use useInView hook.
- while writing an function definition insider an parenthesis it will automatically return the value inside that... instead of writing the return statement
        - eg: function returnSample() ({
                y=1
        })

